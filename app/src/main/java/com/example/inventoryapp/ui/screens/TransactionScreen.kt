package com.example.inventoryapp.ui.screens

import android.net.Uri
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.inventoryapp.data.InventoryRepository
import com.example.inventoryapp.data.Result
import com.example.inventoryapp.model.InventoryItem
import com.example.inventoryapp.model.Transaction
import com.example.inventoryapp.model.UserRole
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

@Composable
fun TransactionScreen(
    navController: NavController,
    inventoryRepo: InventoryRepository,
    userRole: UserRole,
    snackbarHostState: SnackbarHostState
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()

    var serialNumber by remember { mutableStateOf("") }
    var modelName by remember { mutableStateOf("") }
    var selectedTransactionType by remember { mutableStateOf("Purchase") }
    var customerName by remember { mutableStateOf("") }
    var phoneNumber by remember { mutableStateOf("") }
    var aadhaarNumber by remember { mutableStateOf("") }
    var amount by remember { mutableStateOf("") }
    var quantity by remember { mutableStateOf("") }
    var description by remember { mutableStateOf("") }
    var selectedImages by remember { mutableStateOf<List<Uri>>(emptyList()) }

    var serialError by remember { mutableStateOf<String?>(null) }
    var modelError by remember { mutableStateOf<String?>(null) }
    var amountError by remember { mutableStateOf<String?>(null) }
    var quantityError by remember { mutableStateOf<String?>(null) }
    var loading by remember { mutableStateOf(false) }

    fun validateForm(): Boolean {
        var isValid = true

        if (serialNumber.isBlank()) {
            serialError = "Serial number required"
            isValid = false
        } else {
            serialError = null
        }

        if (modelName.isBlank()) {
            modelError = "Model name required"
            isValid = false
        } else {
            modelError = null
        }

        if (amount.isBlank() || amount.toDoubleOrNull() == null || amount.toDouble() <= 0) {
            amountError = "Valid amount is required"
            isValid = false
        } else {
            amountError = null
        }

        if (quantity.isBlank() || quantity.toIntOrNull() == null || quantity.toInt() <= 0) {
            quantityError = "Valid quantity is required"
            isValid = false
        } else {
            quantityError = null
        }

        // Inventory validation (optional: can add more logic)
        return isValid
    }

    fun submitTransaction() {
        if (!validateForm()) return

        scope.launch {
            try {
                loading = true

                val transaction = Transaction(
                    id = "", // Will be generated by Firestore
                    serial = serialNumber,
                    model = modelName,
                    type = selectedTransactionType,
                    customerName = customerName,
                    phoneNumber = phoneNumber.ifBlank { null },
                    aadhaarNumber = aadhaarNumber.ifBlank { null },
                    amount = amount.toDouble(),
                    quantity = quantity.toInt(),
                    description = description.ifBlank { null },
                    date = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date()),
                    timestamp = System.currentTimeMillis(),
                    userRole = userRole.name,
                    images = selectedImages.map { it.toString() }
                )

                // Save transaction
                val result = inventoryRepo.addTransaction(serialNumber, transaction)
                if (result is Result.Success) {
                    // --- INVENTORY UPDATE LOGIC ---
                    val item = inventoryRepo.getItemBySerial(serialNumber)
                    if (selectedTransactionType == "Purchase") {
                        if (item == null) {
                            val newItem = InventoryItem(
                                serial = serialNumber,
                                name = modelName,
                                model = modelName,
                                quantity = quantity.toInt(),
                                phone = phoneNumber,
                                aadhaar = aadhaarNumber,
                                description = description,
                                date = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date()),
                                timestamp = System.currentTimeMillis(),
                                imageUrls = selectedImages.map { it.toString() }
                            )
                            inventoryRepo.addOrUpdateItem(serialNumber, newItem)
                        } else {
                            val updatedItem = item.copy(quantity = item.quantity + quantity.toInt())
                            inventoryRepo.addOrUpdateItem(serialNumber, updatedItem)
                        }
                    } else if (selectedTransactionType == "Sale" && item != null) {
                        val updatedQty = item.quantity - quantity.toInt()
                        val updatedItem = item.copy(quantity = updatedQty.coerceAtLeast(0))
                        inventoryRepo.addOrUpdateItem(serialNumber, updatedItem)
                    }
                    // --- END INVENTORY UPDATE LOGIC ---

                    snackbarHostState.showSnackbar("Transaction saved successfully")
                    navController.popBackStack()
                } else if (result is Result.Error) {
                    snackbarHostState.showSnackbar(result.exception?.message ?: "Error saving transaction")
                }
            } catch (e: Exception) {
                snackbarHostState.showSnackbar(e.message ?: "Unknown error occurred")
            } finally {
                loading = false
            }
        }
    }

    // UI code goes here (fields, buttons, etc.)
    // Example UI omitted for brevity
    // Call submitTransaction() on the Save button's onClick

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // ... form fields ...
        OutlinedTextField(
            value = serialNumber,
            onValueChange = { serialNumber = it; serialError = null },
            label = { Text("Serial Number") },
            isError = serialError != null,
            modifier = Modifier.fillMaxWidth()
        )
        serialError?.let { Text(it, color = MaterialTheme.colorScheme.error) }

        OutlinedTextField(
            value = modelName,
            onValueChange = { modelName = it; modelError = null },
            label = { Text("Model Name") },
            isError = modelError != null,
            modifier = Modifier.fillMaxWidth()
        )
        modelError?.let { Text(it, color = MaterialTheme.colorScheme.error) }

        OutlinedTextField(
            value = amount,
            onValueChange = { amount = it.filter { ch -> ch.isDigit() || ch == '.' }; amountError = null },
            label = { Text("Amount") },
            isError = amountError != null,
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            modifier = Modifier.fillMaxWidth()
        )
        amountError?.let { Text(it, color = MaterialTheme.colorScheme.error) }

        OutlinedTextField(
            value = quantity,
            onValueChange = { quantity = it.filter { ch -> ch.isDigit() }; quantityError = null },
            label = { Text("Quantity") },
            isError = quantityError != null,
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            modifier = Modifier.fillMaxWidth()
        )
        quantityError?.let { Text(it, color = MaterialTheme.colorScheme.error) }

        // ... other fields ...

        Button(
            onClick = { submitTransaction() },
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 16.dp),
            enabled = !loading
        ) {
            if (loading) {
                CircularProgressIndicator(
                    color = MaterialTheme.colorScheme.onPrimary,
                    modifier = Modifier.size(18.dp)
                )
                Spacer(Modifier.width(8.dp))
            }
            Text("Save Transaction")
        }
    }
}